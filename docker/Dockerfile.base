ARG build_image
ARG dist_image
ARG uv_image

FROM $uv_image AS uv_image
FROM $build_image AS build-image

ARG llama_deploy_version
ARG llama_deploy_version_sha
ARG llama_deploy_extras=""
ARG git_clone_options

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    git

# HACK: Copy local sources instead of cloning from GitHub
COPY --from=uv_image /uv /usr/local/bin/uv
WORKDIR /opt/llama_deploy

# Copy the essential files for building
COPY pyproject.toml README.md ./
COPY llama_deploy/ ./llama_deploy/

# Use a virtualenv we can copy over the next build stage
RUN python3 -m venv --system-site-packages /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install llama_deploy with uv (no-editable for production-like install)
ENV UV_PROJECT_ENVIRONMENT=/opt/venv
RUN uv sync --no-editable

FROM $dist_image AS final

ENV PATH="/opt/venv/bin:$PATH"
RUN apt-get update && \
    apt-get install -y --no-install-recommends git nodejs npm && \
    npm i pnpm --global

ARG apiserver_port
ARG rc_path
ARG prometheus_enabled
ARG prometheus_port

EXPOSE ${apiserver_port}
EXPOSE ${prometheus_port}

COPY --from=build-image /opt/venv /opt/venv
COPY docker/run_apiserver.py /opt
COPY docker/run_autodeploy.py /opt
COPY --from=uv_image /uv /bin/

# Default configuration, override with "docker run -e NAME=value"
ENV LLAMA_DEPLOY_APISERVER_RC_PATH=${rc_path}
ENV LLAMA_DEPLOY_APISERVER_HOST=0.0.0.0
ENV LLAMA_DEPLOY_APISERVER_PORT=${apiserver_port}
ENV LLAMA_DEPLOY_APISERVER_PROMETHEUS_ENABLED=${prometheus_enabled}
ENV LLAMA_DEPLOY_APISERVER_PROMETHEUS_PORT=${prometheus_port}

FROM final AS base

ENTRYPOINT [ "python", "/opt/run_apiserver.py" ]

FROM final AS autodeploy

ENTRYPOINT [ "python", "/opt/run_autodeploy.py" ]
